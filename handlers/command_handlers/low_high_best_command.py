from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from keyboards.inline.end_result import count_hotels
from keyboards.inline.location import city_markup
from loader import dp
from states.hotels_information import Hotel_Info


@dp.message(Command(commands=["lowprice", "highprice", "bestdeal"]))
async def user_query(message: types.Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param message: –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥–∞
    """
    await state.set_state(Hotel_Info.city)
    await state.update_data(user_command=message.text)
    await message.answer(
        f"{message.from_user.first_name}, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—â–µ–º –æ—Ç–µ–ª—å? üó∫",
        reply_markup=ReplyKeyboardRemove(),
    )


@dp.message(Hotel_Info.city)
async def get_city(message: types.Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª—è) –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param message: –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª—è)
    """
    await state.update_data(city=message.text)
    city_keyboard = await city_markup(message.text)
    if city_keyboard:
        await message.answer(
            "–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ª–æ–∫–∞—Ü–∏—é üìå", reply_markup=city_keyboard
        )
    else:
        await message.answer("–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã!")


@dp.message(Hotel_Info.price_min)
async def get_min_price(message: types.Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞ —Å—É—Ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param message: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞ —Å—É—Ç–∫–∏, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    data = await state.get_data()
    if data["user_command"] in ["/lowprice", "üîù –î–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π üè†"]:
        if message.text.isdigit():
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π üë®üèª‚Äçü¶∞")
            await state.set_state(Hotel_Info.adults)
            await state.update_data(price_min=message.text)
        else:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    elif data["user_command"] in ["/bestdeal", "üîù –ù–∞–∏–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üèò"]:
        if message.text.isdigit():
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ —Å—É—Ç–∫–∏ ($) üí∞")
            await state.set_state(Hotel_Info.price_max)
            await state.update_data(price_min=message.text)
        else:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")


@dp.message(Hotel_Info.price_max)
async def get_max_price(message: types.Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞ —Å—É—Ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param message: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞ —Å—É—Ç–∫–∏, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """

    if message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π üë®üèª‚Äçü¶∞")
        await state.set_state(Hotel_Info.adults)
        await state.update_data(price_max=message.text)
    else:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")


@dp.message(Hotel_Info.adults)
async def get_adults(message: types.Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–µ—Ç–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param message: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –≤–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–µ–π, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    if message.text.isdigit():
        await message.answer(
            '–ï—Å–ª–∏ —Å –í–∞–º–∏ –¥–µ—Ç–∏, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∫–∞–∂–¥–æ–≥–æ (–¥–æ 18 –ª–µ—Ç) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ù–∞–ø—Ä–∏–º–µ—Ä (3-–µ –¥–µ—Ç–µ–π): 3, 5, 6), –∏–Ω–∞—á–µ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç'
            " üë©üèª‚Äçü¶≤"
        )
        await state.set_state(Hotel_Info.childrens)
        await state.update_data(adults=message.text)
    else:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")


@dp.message(Hotel_Info.childrens)
async def get_childrens(message: types.Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–µ—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param message: —Å–ø–∏—Å–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π –∏ –∏—Ö –≤–æ–∑—Ä–∞—Å—Ç, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    global s
    age_list = []
    for s in message.text.split(","):
        age_list.append(s)
    if age_list[0] == "–Ω–µ—Ç":
        await state.update_data(childrens=0)
        await state.set_state(Hotel_Info.hotels_count)
        await message.answer(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ üé≤",
            reply_markup=await count_hotels(),
        )
    elif [s for s in age_list if s.isdigit()] and int(s) < 18:
        await state.update_data(childrens=age_list)
        await state.set_state(Hotel_Info.hotels_count)
        await message.answer(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ üé≤",
            reply_markup=await count_hotels(),
        )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!")
