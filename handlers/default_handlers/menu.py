from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from config_data.config_reader import DEFAULT_COMMANDS
from database.aiosqlite_db import delete_info, get_sql_db
from handlers.command_handlers.low_high_best_command import user_query
from keyboards.reply.history_keyboard import markup_db
from keyboards.reply.start_keyboard import markup_2, markup_3
from loader import dp
from states.hotels_information import Hotel_Info


bot_menu_items = [
    "üîù –î–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π üè†",
    "üîù –î–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π üè°",
    "üîù –ù–∞–∏–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üèò",
    "üîé –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ üìñ",
    "üö® –ü–æ–º–æ—â—å üö®",
]


@dp.message(F.text == "üöÄ –°—Ç–∞—Ä—Ç üöÄ")
async def bot_message(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª–µ–π).
    :param message: –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–∞–∏–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üëå", reply_markup=markup_2
    )
    await state.set_state(Hotel_Info.bot_work_menu)


@dp.message(Hotel_Info.bot_work_menu, F.text.in_(bot_menu_items))
async def bot_menu(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª—è), –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–º–æ—â–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ.
    :param message: –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if (
        message.text == "üîù –î–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π üè†"
        or message.text == "üîù –î–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π üè°"
        or message.text == "üîù –ù–∞–∏–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üèò"
    ):
        await user_query(message, state)

    elif message.text == "üîé –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ üìñ":
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞  üìú",
            reply_markup=markup_db,
        )
        await state.set_state(Hotel_Info.bot_work_db)

    elif message.text == "üö® –ü–æ–º–æ—â—å üö®":
        await message.answer(
            "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞: üóí ",
            reply_markup=ReplyKeyboardRemove(),
        )
        text = [f"/{command} - {desk}" for command, desk in DEFAULT_COMMANDS]
        await message.answer("\n".join(text))


@dp.message(Hotel_Info.bot_work_db)
async def bot_db(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏ –æ—á–∏—Å—Ç–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è).
    :param message: –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if message.text == "üïµüèª‚Äç‚ôÇ–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞üìú":
        history = await get_sql_db()
        if history:
            for part in history:
                url = "https://hotels.com/ho" + str(part[2])
                name = part[3]
                name_url = f'<a href="{url}">"{name}"</a> '

                history_info = (
                    f"–í–≤–µ–¥–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {part[0]} \n"
                    + f"–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞: {part[1]} \n"
                    + f"–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {name_url} \n"
                    + f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {part[5]}"
                )

                await message.answer_photo(
                    photo=(f"{part[4]}"),
                    caption=history_info,
                    parse_mode="html",
                    reply_markup=markup_3,
                )
            await state.set_state(Hotel_Info.bot_work_back)

        else:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞ üí≠", reply_markup=markup_3)
            await state.set_state(Hotel_Info.bot_work_back)

    elif message.text == "üßπ–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞üóë":
        await delete_info()
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ üëå", reply_markup=markup_3)
        await state.set_state(Hotel_Info.bot_work_back)


@dp.message(Hotel_Info.bot_work_back)
async def bot_back(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ —Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    :param message: –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if message.text == "üîô –ù–∞–∑–∞–¥ üîô":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ üëå", reply_markup=markup_db
        )
        await state.set_state(Hotel_Info.bot_work_db)

    elif message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–∞–∏–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üëå", reply_markup=markup_2
        )
        await state.set_state(Hotel_Info.bot_work_menu)
