from contextlib import suppress
from datetime import datetime
from typing import Optional
from aiogram import F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from botrequest import rapidapi
from database.aiosqlite_db import sql_add_command
from keyboards.reply.start_keyboard import markup_1
from loader import dp
from states.hotels_information import Hotel_Info


async def count_hotels() -> InlineKeyboardMarkup:
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª–µ–π) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π
    """
    count_hotels_inline = [
        [InlineKeyboardButton(text="3 üè†", callback_data="hotels_count:3")],
        [InlineKeyboardButton(text="6 üè†", callback_data="hotels_count:6")],
        [InlineKeyboardButton(text="9 üè†", callback_data="hotels_count:9")],
        [InlineKeyboardButton(text="12 üè†", callback_data="hotels_count:12")],
        [InlineKeyboardButton(text="15 üè†", callback_data="hotels_count:15")],
        [InlineKeyboardButton(text="–í—Å–µ üèò", callback_data="hotels_count:25")],
    ]
    markup_inline = InlineKeyboardMarkup(
        row_width=2, inline_keyboard=count_hotels_inline
    )
    return markup_inline


@dp.callback_query(Hotel_Info.hotels_count, F.data.startswith("hotels_count"))
async def answer(call: CallbackQuery, state: FSMContext) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª—è).
    :param state: –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∏–ø–∞ FSMContext, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :param call: –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
    :return: –≤—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    global hotels_info, hotel
    if call.message:
        await state.update_data(hotels_count=call.data.split(":")[1])
        hotels = call.data.split(":")[1]
        data = await state.get_data()
        date_1 = datetime.strptime(str(data["check_in"]), "%Y-%m-%d")
        date_2 = datetime.strptime(str(data["check_out"]), "%Y-%m-%d")
        days = date_2 - date_1
        period = str(days).split()[0]

        if data["user_command"] in [
            "/lowprice",
            "üîù –î–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π üè†",
            "/highprice",
            "üîù –î–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π üè°",
        ]:
            text_low_high = (
                f'<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.</b> \n–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ üó∫: {data["city_loc"]} \n'
                + f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π üé≤: {hotels} \n"
                + f'–í—ä–µ–∑–¥ ‚û°: {data["check_in"]} \n'
                + f'–í—ã–µ–∑–¥ ‚¨Ö: {data["check_out"]} \n'
                + f"–í–µ–¥—É –ø–æ–∏—Å–∫...üïµüèª‚Äç‚ôÇ"
            )
            await call.message.answer(
                text_low_high, reply_markup=markup_1, parse_mode="html"
            )
            await call.message.delete()
            hotels_info = await rapidapi.search_hotels(data)

        elif data["user_command"] in ["/bestdeal", "üîù –ù–∞–∏–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üèò"]:
            text_bst = (
                f'<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.</b> \n–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ üó∫: {data["city_loc"]} \n'
                + f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π üé≤: {data["hotels_count"]} \n'
                + f'–í—ä–µ–∑–¥ ‚û°: {data["check_in"]} \n'
                + f'–í—ã–µ–∑–¥ ‚¨Ö: {data["check_out"]} \n'
                + f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ ‚¨á: {data["price_min"]} \n'
                + f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ ‚¨Ü: {data["price_max"]} \n'
                + f"–í–µ–¥—É –ø–æ–∏—Å–∫...üïµüèª‚Äç‚ôÇ"
            )
            await call.message.answer(
                text_bst, reply_markup=markup_1, parse_mode="html"
            )
            await call.message.delete()
            hotels_info = await rapidapi.search_hotels(data)

        for hotel in hotels_info.values():
            info = (
                f' \n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è üè®: {hotel["name"]} \n'
                + f'–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–µ–ª—è üì™: {hotel["loc"]} \n'
                + f'–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è üèÜ: {hotel["reviews"]} \n'
                + f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ üöï: {round(hotel["landmarks"] * 1.61, 1)} –∫–º \n'
                + f'–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏ üí≥: {hotel["price"]} $\n'
                + f'–¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è üí∞: {int(hotel["price"]) * int(period)} $'
            )
            await call.message.answer_photo(
                photo=(f'{hotel["fonfoto"]}'),
                caption=info,
                reply_markup=await hotel_inline(hotel),
            )
            date_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            message_db = [
                data["user_command"],
                data["city_loc"],
                hotel["id"],
                hotel["name"],
                hotel["fonfoto"],
                date_time,
            ]
            await sql_add_command(message_db)
        return hotel


async def hotel_inline(hotel: int) -> InlineKeyboardMarkup:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ª–æ–∫–∞—Ü–∏–∏–µ–π, —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ—Ç–µ–ª—å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª—è.
    :param hotel: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :return: –≤—ã–≤–æ–¥ –∏–Ω–ª–∞–π–Ω - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    kb_hotel_inline = [
        [
            InlineKeyboardButton(
                text="üåç  –ù–∞ Google Maps üìå",
                url=f'http://maps.google.com/maps?z=12&t=m&q=loc:{hotel["coordinate"]}',
            )
        ],
        [
            InlineKeyboardButton(
                text="üåê –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É üì≤",
                url=f'https://www.hotels.com/h{hotel["id"]}.Hotel-information/',
            )
        ],
        [
            InlineKeyboardButton(
                text="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üèô", callback_data=f'id:{hotel["id"]}'
            )
        ],
    ]
    markup = InlineKeyboardMarkup(row_width=1, inline_keyboard=kb_hotel_inline)
    return markup


@dp.callback_query(F.data.startswith("id"))
async def send_photo(call: CallbackQuery, state: FSMContext) -> Optional[list]:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª—è) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞.
    :param state: –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∏–ø–∞ FSMContext, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :param call: –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    :return: —Å–ø–∏—Å–æ–∫ url-–∞–¥—Ä–µ—Å–æ–≤ —Ñ–æ—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Ç–µ–ª—è).
    """
    if call.message:
        id_hotel = call.data.split(":")[1]
        images = await rapidapi.search_photo_hotel(id_hotel)
        await state.set_state(Hotel_Info.images)
        await state.update_data(images=images)
        data = await state.get_data()
        photos = data["images"]
        await call.message.answer_photo(
            photos[0], reply_markup=paginator(), parse_mode="Markdown"
        )
        return images


class Pagination(CallbackData, prefix="pag"):
    action: str
    page: int


def paginator(page: int = 0) -> InlineKeyboardMarkup:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞
    :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –≤ –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–µ
    :return: –≤—ã–≤–æ–¥ –∏–Ω–ª–∞–π–Ω - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è", callback_data=Pagination(action="prev", page=page).pack()
        ),
        InlineKeyboardButton(
            text="‚û°Ô∏è", callback_data=Pagination(action="next", page=page).pack()
        ),
        width=2,
    )
    builder.add(InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å ‚ùå ", callback_data="back"))
    return builder.as_markup()


@dp.callback_query(Pagination.filter(F.action.in_(["prev", "next"])))
async def pagination_handler(
    call: CallbackQuery, callback_data: Pagination, state: FSMContext
) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞
    :param call: –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    :param callback_data: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Pagination, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–º–µ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞
    :param state: –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∏–ø–∞ FSMContext, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    """
    data = await state.get_data()
    photos = data["images"]
    page_num = int(callback_data.page)
    page = page_num - 1 if page_num > 0 else 0

    if callback_data.action == "next":
        page = page_num + 1 if page_num < (len(photos) - 1) else page_num
    with suppress(TelegramBadRequest):
        await call.message.edit_media(
            media=InputMediaPhoto(media=photos[page], caption=None),
            reply_markup=paginator(page),
        )


@dp.callback_query(F.data.startswith("back"))
async def close_paginator(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞.
    :param call: –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    await call.message.delete()
