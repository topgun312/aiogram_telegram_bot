from datetime import datetime, timedelta
from typing import Union
from aiogram import F
from aiogram3_calendar import simple_cal_callback
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from botrequest.rapidapi import search_location
from keyboards.inline.calendar.calendar import SimpleCalendar
from keyboards.inline.calendar.calendar_types import SimpleCalendarCallback
from loader import dp
from states.hotels_information import Hotel_Info


async def city_markup(message: str) -> InlineKeyboardMarkup:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è(–æ—Ç–µ–ª–µ–π) –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞.
    :param message: –≤–≤–µ–¥–µ–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
    :return: –∏–Ω–ª–∞–π–Ω - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ª–æ–∫–∞—Ü–∏–µ–π.
    """
    cities = await search_location(message)
    if cities:
        buttons = []
        for city in cities:
            button = [
                InlineKeyboardButton(
                    text=city["city_name"],
                    callback_data=f'destination:{city["destination_id"]}',
                )
            ]
            buttons.append(button)
        destinations = InlineKeyboardMarkup(inline_keyboard=buttons)
        return destinations


@dp.callback_query(F.data.startswith("destination"))
async def nav_cal_handler(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏  –ª–æ–∫–∞—Ü–∏–∏ –∏ –≤—ã–∑–æ–≤–∞ —Ä–∞–±–æ—Ç—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    :param call: –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    :param state: –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∏–ø–∞ FSMContext, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    """
    if call.message:
        await state.update_data(location=call.data.split(":")[1])
        for keyboard in call.message.reply_markup.inline_keyboard:
            for i in keyboard:
                if i.callback_data == call.data:
                    await state.update_data(city_loc=i.text)
        await state.set_state(Hotel_Info.check_in)
        await call.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞: ",
            reply_markup=await SimpleCalendar().start_calendar(),
        )
        await call.message.delete()


@dp.callback_query(simple_cal_callback.filter(), Hotel_Info.check_in)
async def process_simple_calendar_in(
    call: CallbackQuery,
    callback_data: Union[CallbackData, SimpleCalendarCallback],
    state: FSMContext,
) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    :param call: –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    :param callback_data:  —Å–ª–æ–≤–∞—Ä—å, –∑–∞–¥–∞–Ω–Ω—ã–π calendar_callback
    :param state: –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∏–ø–∞ FSMContext, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    """
    selected, date = await SimpleCalendar().process_selection(call, callback_data)
    if selected:
        if date < datetime.utcnow() - timedelta(days=1):
            await call.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É",
                reply_markup=await SimpleCalendar().start_calendar(),
            )
            await call.message.delete()
        else:
            await state.update_data(check_in=date.strftime("%Y-%m-%d"))
            await state.set_state(Hotel_Info.check_out)
            await call.message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:",
                reply_markup=await SimpleCalendar().start_calendar(),
            )
            await call.message.delete()


@dp.callback_query(simple_cal_callback.filter(), Hotel_Info.check_out)
async def process_simple_calendar_out(
    call: CallbackQuery,
    callback_data: Union[CallbackData, SimpleCalendarCallback],
    state: FSMContext,
) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    :param call: –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    :param callback_data:  —Å–ª–æ–≤–∞—Ä—å, –∑–∞–¥–∞–Ω–Ω—ã–π calendar_callback
    :param state: –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–∏–ø–∞ FSMContext, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    """
    selected, date = await SimpleCalendar().process_selection(call, callback_data)
    if selected:
        check_in = await state.get_data()
        check_in_date = datetime.strptime(check_in["check_in"], "%Y-%m-%d")
        if date < check_in_date + timedelta(days=1):
            await call.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É",
                reply_markup=await SimpleCalendar().start_calendar(),
            )
            await call.message.delete()
        else:
            await state.update_data(check_out=date.strftime("%Y-%m-%d"))
            await call.message.delete()
            data = await state.get_data()

            if data["user_command"] in [
                "/lowprice",
                "üîù –î–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π üè†",
                "/bestdeal",
                "üîù –ù–∞–∏–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üèò",
            ]:
                await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ —Å—É—Ç–∫–∏ ($) üí∞")
                await state.set_state(Hotel_Info.price_min)

            if data["user_command"] in ["/highprice", "üîù –î–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π üè°"]:
                await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ —Å—É—Ç–∫–∏ ($) üí∞")
                await state.set_state(Hotel_Info.price_max)
